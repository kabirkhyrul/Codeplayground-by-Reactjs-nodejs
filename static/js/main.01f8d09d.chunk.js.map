{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","syncUpdates","data","state","axios","post","catch","console","error","runCode","html","css","js","document","refs","iframe","contentDocument","documentContents","open","write","close","id","pusher","Pusher","cluster","forceTLS","channel","subscribe","this","setState","pushid","bind","codeMirrorOptions","theme","lineNumbers","scrollbarStyle","lineWrapping","className","value","options","mode","onBeforeChange","editor","title","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"46BAgKmBA,E,YAjJb,aAAe,IAAD,8BACZ,+CAqCFC,YAAc,WACZ,IAAMC,EAAI,KAAQ,EAAKC,OAEvBC,IACGC,KAAK,sCAAuCH,GAC5CI,MAAMC,QAAQC,QA3CL,EA8CdC,QAAU,WAAO,IAAD,EACY,EAAKN,MAAvBO,EADM,EACNA,KAAMC,EADA,EACAA,IAAKC,EADL,EACKA,GAGbC,EADS,EAAKC,KAAKC,OACDC,gBAClBC,EAAgB,wVASdN,EATc,oFAahBD,EAbgB,0EAgBdE,EAhBc,4EAsBtBC,EAASK,OACTL,EAASM,MAAMF,GACfJ,EAASO,SAzET,EAAKjB,MAAQ,CACXkB,GAAI,GACJX,KAAM,GACNC,IAAK,GACLC,GAAI,IAGN,EAAKU,OAAS,IAAIC,IAAO,iBAAkB,CACzCC,QAAS,qBACTC,UAAU,IAGZ,EAAKC,QAAU,EAAKJ,OAAOK,UAAU,UAdzB,E,kFAkBZC,KAAKnB,Y,0CAGc,IAAD,OAClBmB,KAAKC,SAAS,CACZR,GAAIS,QAGNF,KAAKF,QAAQK,KAAK,cAAe,SAAA7B,GAAS,IAChCmB,EAAO,EAAKlB,MAAZkB,GACJnB,EAAKmB,KAAOA,GAEhB,EAAKQ,SAAS,CACZnB,KAAMR,EAAKQ,KACXC,IAAKT,EAAKS,IACVC,GAAIV,EAAKU,S,+BA6CL,IAAD,SACmBgB,KAAKzB,MAAvBO,EADD,EACCA,KAAME,EADP,EACOA,GAAID,EADX,EACWA,IACZqB,EAAoB,CACxBC,MAAO,WACPC,aAAa,EACbC,eAAgB,KAChBC,cAAc,GAGhB,OACE,yBAAKC,UAAU,OACb,6BAASA,UAAU,cACjB,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,iBAAf,QACA,kBAAC,aAAD,CACEC,MAAO5B,EACP6B,QAAO,GACLC,KAAM,aACHR,GAELS,eAAgB,SAACC,EAAQxC,EAAMQ,GAG7B,EAAKmB,SAAS,CAAEnB,QAAQ,kBAAM,EAAKT,oBAIzC,yBAAKoC,UAAU,wBACb,yBAAKA,UAAU,iBAAf,OACA,kBAAC,aAAD,CACEC,MAAO3B,EACP4B,QAAO,GACLC,KAAM,OACHR,GAELS,eAAgB,SAACC,EAAQxC,EAAMS,GAG7B,EAAKkB,SAAS,CAAElB,OAAO,kBAAM,EAAKV,oBAIxC,yBAAKoC,UAAU,uBACb,yBAAKA,UAAU,iBAAf,cACA,kBAAC,aAAD,CACEC,MAAO1B,EACP2B,QAAO,GACLC,KAAM,cACHR,GAELS,eAAgB,SAACC,EAAQxC,EAAMU,GAG7B,EAAKiB,SAAS,CAAEjB,MAAM,kBAAM,EAAKX,qBAMzC,6BAASoC,UAAU,UACjB,4BAAQM,MAAM,SAASN,UAAU,SAASO,IAAI,iB,GA3ItCC,aCFFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvC,SAASwC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.01f8d09d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n    import { Controlled as CodeMirror } from 'react-codemirror2';\n    import Pusher from 'pusher-js';\n    import pushid from 'pushid';\n    import axios from 'axios';\n\n    import './App.css';\n    import 'codemirror/lib/codemirror.css';\n    import 'codemirror/theme/material.css';\n\n    import 'codemirror/mode/htmlmixed/htmlmixed';\n    import 'codemirror/mode/css/css';\n    import 'codemirror/mode/javascript/javascript';\n\n    class App extends Component {\n      constructor() {\n        super();\n        this.state = {\n          id: \"\",\n          html: \"\",\n          css: \"\",\n          js: \"\"\n        };\n\n        this.pusher = new Pusher(\"<your app key>\", {\n          cluster: \"<your app cluster>\",\n          forceTLS: true\n        });\n\n        this.channel = this.pusher.subscribe(\"editor\");\n      }\n\n      componentDidUpdate() {\n        this.runCode();\n      }\n\n      componentDidMount() {\n        this.setState({\n          id: pushid()\n        });\n\n        this.channel.bind(\"code-update\", data => {\n          const { id } = this.state;\n          if (data.id === id) return;\n\n          this.setState({\n            html: data.html,\n            css: data.css,\n            js: data.js,\n          });\n        });\n      }\n\n      syncUpdates = () => {\n        const data = { ...this.state };\n\n        axios\n          .post(\"http://localhost:5000/update-editor\", data)\n          .catch(console.error);\n      };\n\n      runCode = () => {\n        const { html, css, js } = this.state;\n\n        const iframe = this.refs.iframe;\n        const document = iframe.contentDocument;\n        const documentContents = `\n          <!DOCTYPE html>\n          <html lang=\"en\">\n          <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n            <title>Document</title>\n            <style>\n              ${css}\n            </style>\n          </head>\n          <body>\n            ${html}\n\n            <script type=\"text/javascript\">\n              ${js}\n            </script>\n          </body>\n          </html>\n        `;\n\n        document.open();\n        document.write(documentContents);\n        document.close();\n      };\n\n      render() {\n        const { html, js, css } = this.state;\n        const codeMirrorOptions = {\n          theme: \"material\",\n          lineNumbers: true,\n          scrollbarStyle: null,\n          lineWrapping: true\n        };\n\n        return (\n          <div className=\"App\">\n            <section className=\"playground\">\n              <div className=\"code-editor html-code\">\n                <div className=\"editor-header\">HTML</div>\n                <CodeMirror\n                  value={html}\n                  options={{\n                    mode: \"htmlmixed\",\n                    ...codeMirrorOptions\n                  }}\n                  onBeforeChange={(editor, data, html) => {\n                    // we’re making a request to the /update-editor route\n                    // This method is triggered each time a change is made in any of the code editors.\n                    this.setState({ html }, () => this.syncUpdates()); \n                  }}\n                />\n              </div>\n              <div className=\"code-editor css-code\">\n                <div className=\"editor-header\">CSS</div>\n                <CodeMirror\n                  value={css}\n                  options={{\n                    mode: \"css\",\n                    ...codeMirrorOptions\n                  }}\n                  onBeforeChange={(editor, data, css) => {\n                    // we’re making a request to the /update-editor route\n                    // This method is triggered each time a change is made in any of the code editors.\n                    this.setState({ css }, () => this.syncUpdates()); \n                  }}\n                />\n              </div>\n              <div className=\"code-editor js-code\">\n                <div className=\"editor-header\">JavaScript</div>\n                <CodeMirror\n                  value={js}\n                  options={{\n                    mode: \"javascript\",\n                    ...codeMirrorOptions\n                  }}\n                  onBeforeChange={(editor, data, js) => {\n                    // we’re making a request to the /update-editor route\n                    // This method is triggered each time a change is made in any of the code editors.\n                    this.setState({ js }, () => this.syncUpdates()); \n                    \n                  }}\n                />\n              </div>\n            </section>\n            <section className=\"result\">\n              <iframe title=\"result\" className=\"iframe\" ref=\"iframe\" />\n            </section>\n          </div>\n        );\n      }\n    }\n\n    export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}